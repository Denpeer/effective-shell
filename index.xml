<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Effective Shell</title><link>https://effective-shell.com/</link><description>Recent content on Effective Shell</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://effective-shell.com/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://effective-shell.com/docs/section1/2-clipboard-gymnastics/examples/formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://effective-shell.com/docs/section1/2-clipboard-gymnastics/examples/formatting/</guid><description> Formatting Apples Oranges Pears Apples</description></item><item><title/><link>https://effective-shell.com/docs/section1/5-what-is-a-shell/hack-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://effective-shell.com/docs/section1/5-what-is-a-shell/hack-on/</guid><description>Hack On! See those system calls! I mentioned earlier on that if you make a call like fopen, the Kernel is going to provide access to a file. It's quite easy to see this in action. Check the code below:
#include &amp;lt;stdio.h&amp;gt; void main() { void* handle = fopen(&amp;#34;/tmp/some-file&amp;#34;); fwrite(handle, &amp;#34;some text&amp;#34;); fclose(handle); } If you compile this program, then run XXX you will see the actual calls made to the Kernel.</description></item><item><title/><link>https://effective-shell.com/docs/section2/6-job-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://effective-shell.com/docs/section2/6-job-control/</guid><description>Job control is a feature of most shells, which is generally not particularly intuitive to work with. However, knowing the basics can help prevent you from getting yourself into a tangle, and can from time to time make certain tasks a little easier.
What Is Job Control? Let's start with an example. I am building a simple web page. It has one index.html file, one styles.css file, and one code.js file.</description></item><item><title/><link>https://effective-shell.com/docs/section2/7-understanding-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://effective-shell.com/docs/section2/7-understanding-commands/</guid><description>In this chapter, we'll take a look at the various different types of shell commands that exist and how this can affect your work.
By the end of this chapter, you might even be able to make sense of the horrifying and perfectly syntactically valid code below:
which $(where $(what $(whence $(whereis who)))) What Are Commands? This is really important to understand! A command in a shell is something you execute.</description></item></channel></rss>